exec('''\nfrom typing import List, Optional, Union\n\nfrom aiohttp import MultipartWriter\nfrom interactions.api.http.route import Route\nfrom interactions.client.context import CommandContext, ComponentContext, _Context\nfrom interactions.client.models.component import _build_components\n\nfrom interactions import (\n	MISSING,\n	ActionRow,\n	Button,\n	Embed,\n	File,\n	InteractionCallbackType,\n	Message,\n	MessageInteraction,\n	SelectMenu,\n)\n\n\nasync def create_interaction_response(\n	self, token: str, application_id: int, data: dict, files: List[File]\n) -> None:\n\n	file_data = None\n	if files:\n		file_data = MultipartWriter('form-data')\n		part = file_data.append_json(data)\n		part.set_content_disposition('form-data', name='payload_json')\n		data = None\n\n		for id, file in enumerate(files):\n			part = file_data.append(\n				file._fp,\n			)\n			part.set_content_disposition(\n				'form-data', name=f'files[{str(id)}]', filename=file._filename\n			)\n\n	return await self._req.request(\n		Route('POST', f'/interactions/{application_id}/{token}/callback'),\n		json=data,\n		data=file_data,\n	)\n\n\nasync def edit_interaction_response(\n	self,\n	data: dict,\n	files: List[File],\n	token: str,\n	application_id: str,\n	message_id: str = '@original',\n) -> dict:\n\n	file_data = None\n	if files:\n		file_data = MultipartWriter('form-data')\n		part = file_data.append_json(data)\n		part.set_content_disposition('form-data', name='payload_json')\n		data = None\n\n		for id, file in enumerate(files):\n			part = file_data.append(\n				file._fp,\n			)\n			part.set_content_disposition(\n				'form-data', name=f'files[{str(id)}]', filename=file._filename\n			)\n\n	return await self._req.request(\n		Route('PATCH', f'/webhooks/{application_id}/{token}/messages/{message_id}'),\n		json=data,\n		data=file_data,\n	)\n\n\nasync def base_send(\n	self,\n	content: Optional[str] = MISSING,\n	*,\n	tts: Optional[bool] = MISSING,\n	files: Optional[List[File]] = None,\n	embeds: Optional[Union[Embed, List[Embed]]] = MISSING,\n	allowed_mentions: Optional[MessageInteraction] = MISSING,\n	components: Optional[\n		Union[\n			ActionRow,\n			Button,\n			SelectMenu,\n			List[ActionRow],\n			List[Button],\n			List[SelectMenu],\n		]\n	] = MISSING,\n	ephemeral: Optional[bool] = False,\n) -> Message:\n	if (\n		content is MISSING\n		and self.message\n		and self.callback == InteractionCallbackType.DEFERRED_UPDATE_MESSAGE\n	):\n		_content = self.message.content\n	else:\n		_content: str = '' if content is MISSING else content\n	_tts: bool = False if tts is MISSING else tts\n	if (\n		embeds is MISSING\n		and self.message\n		and self.callback == InteractionCallbackType.DEFERRED_UPDATE_MESSAGE\n	):\n		embeds = self.message.embeds\n	_embeds: list = (\n		[]\n		if not embeds or embeds is MISSING\n		else ([embed._json for embed in embeds] if isinstance(embeds, list) else [embeds._json])\n	)\n	_allowed_mentions: dict = {} if allowed_mentions is MISSING else allowed_mentions\n	if components is not MISSING and components:\n		_components = _build_components(components=components)\n	elif (\n		components is MISSING\n		and self.message\n		and self.callback == InteractionCallbackType.DEFERRED_UPDATE_MESSAGE\n	):\n		if isinstance(self.message.components, list):\n			_components = self.message.components\n		else:\n			_components = [self.message.components]\n	else:\n		_components = []\n\n	if not files or files is MISSING:\n		_files = []\n	elif isinstance(files, list):\n		_files = [file._json_payload(id) for id, file in enumerate(files)]\n	else:\n		_files = [files._json_payload(0)]\n		files = [files]\n\n	_ephemeral: int = (1 << 6) if ephemeral else 0\n\n	payload: Message = Message(\n		content=_content,\n		tts=_tts,\n		attachments=_files,\n		embeds=_embeds,\n		allowed_mentions=_allowed_mentions,\n		components=_components,\n		flags=_ephemeral,\n	)\n	self.message = payload\n	self.message._client = self.client\n	return payload, files\n\n\nasync def command_send(self, content: Optional[str] = MISSING, **kwargs) -> Message:\n	payload, files = await base_send(self, content, **kwargs)\n\n	if not self.deferred:\n		self.callback = InteractionCallbackType.CHANNEL_MESSAGE_WITH_SOURCE\n\n	_payload: dict = {'type': self.callback.value, 'data': payload._json}\n\n	msg = None\n	if self.responded or self.deferred:\n		if self.deferred:\n			res = await edit_interaction_response(\n				self.client,\n				data=payload._json,\n				files=files,\n				token=self.token,\n				application_id=str(self.application_id),\n			)\n			self.deferred = False\n			self.responded = True\n		else:\n			res = await self.client._post_followup(\n				data=payload._json,\n				token=self.token,\n				application_id=str(self.application_id),\n			)\n		self.message = msg = Message(**res, _client=self.client)\n	else:\n		res = await create_interaction_response(\n			self.client,\n			token=self.token,\n			application_id=int(self.id),\n			data=_payload,\n			files=files,\n		)\n		if res and not res.get('code'):\n			self.message = msg = Message(**res, _client=self.client)\n		self.responded = True\n	if msg is not None:\n		return msg\n	return payload\n\n\nasync def component_send(self, content: Optional[str] = MISSING, **kwargs) -> Message:\n	payload, files = await base_send(self, content, **kwargs)\n\n	if not self.deferred:\n		self.callback = InteractionCallbackType.CHANNEL_MESSAGE_WITH_SOURCE\n	_payload: dict = {'type': self.callback.value, 'data': payload._json}\n	msg = None\n	if (\n		self.responded\n		or self.deferred\n		or self.callback == InteractionCallbackType.DEFERRED_UPDATE_MESSAGE\n	):\n		if self.deferred:\n			res = await edit_interaction_response(\n				self.client,\n				data=payload._json,\n				files=files,\n				token=self.token,\n				application_id=str(self.application_id),\n			)\n			self.deferred = False\n			self.responded = True\n		else:\n			res = await self.client._post_followup(\n				data=payload._json,\n				token=self.token,\n				application_id=str(self.application_id),\n			)\n		self.message = msg = Message(**res, _client=self.client)\n	else:\n		await create_interaction_response(\n			self.client,\n			token=self.token,\n			application_id=int(self.id),\n			data=_payload,\n			files=files,\n		)\n		__newdata = await edit_interaction_response(\n			self.client,\n			data={},\n			token=self.token,\n			application_id=str(self.application_id),\n		)\n		if __newdata and not __newdata.get('code'):\n			msg = Message(**__newdata, _client=self.client)\n			self.message = msg\n		self.responded = True\n	if msg is not None:\n		return msg\n	return payload\n\n\n_Context.send = base_send\nCommandContext.send = command_send\nComponentContext.send = component_send\n''')